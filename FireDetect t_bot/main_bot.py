import logging

from video_process import Processing
from telegram import ReplyKeyboardMarkup, ReplyKeyboardRemove, Update
from telegram.ext import (
    Application,
    CommandHandler,
    ContextTypes,
    ConversationHandler,
    MessageHandler,
    filters,
)

TOKEN = "WRITE_YOUR_TOKEN"

# Enable logging
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
# set higher logging level for httpx to avoid all GET and POST requests being logged
logging.getLogger("httpx").setLevel(logging.WARNING)

logger = logging.getLogger(__name__)

VIDEO = range(1)

process = Processing('video', 'frames')

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """start command processing."""
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Çüëã \n" \
        "–Ø –±–æ—Ç –∫–æ—Ç–æ—Ä—ã–π –ø–æ–∫–∞ —á—Ç–æ –¥–µ–ª–∏—Ç –≤–∏–¥–µ–æ –Ω–∞ –∫–∞–¥—Ä—ã, –Ω–æ —Å–∫–æ—Ä–æ –æ–Ω –±—É–¥–µ—Ç –æ–ø—Ä–µ–¥–µ–ª—è—Ç—å –æ–≥–æ–Ω—å –Ω–∞ –≤–∏–¥–µ–æ\n" \
        "–ö–æ–º–∞–Ω–¥—ã –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:\n" \
        "- start - –∞–∫—Ç–∏–≤–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–æ–º–∞–Ω–¥\n" \
        "- info - –¥–ª—è —Ç–µ—Ö, –∫–æ–º—É –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—Å—è –∏–ª–∏ –ø–æ—á–∏—Ç–∞—Ç—å –æ –ø—Ä–æ–µ–∫—Ç–µ \n" \
        "- detect - –ø–∏—à–µ—à—å –∫–æ–º–∞–Ω–¥—É, –∫–∏–¥–∞–µ—à—å –≤–∏–¥–µ–æ –∏ –ø–æ–ª—É—á–∞–µ—à—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç\n" \
        "- cancel - –¥–ª—è –æ—Ç–º–µ–Ω—ã –∫–æ–º–∞–Ω–¥—ã detect",
        reply_markup=ReplyKeyboardRemove()
    )


async def info(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Info about our project and team."""
    user = update.message.from_user
    logger.info("User %s: Ask info about our project", user.first_name)
    await update.message.reply_text(
        "–î–∞–Ω–Ω—ã–π –±–æ—Ç –ø–æ —Å—É—Ç–∏ —è–≤–ª—è—Ç—Å—è –æ–±–ª–µ–≥—á–µ–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–µ–π –ø—Ä–æ–¥—É–∫—Ç–∞ –¥–µ—Ç–µ–∫—Ü–∏–∏ –æ–≥–Ω—è, —Ç–∞–∫–∂–µ —Ö–æ—á–µ—Ç—Å—è –æ—Ç–º–µ—Ç–∏—Ç—å, " \
        "—á—Ç–æ –±–æ—Ç –±—É–¥–µ—Ç –æ—Ç–∫–ª—é—á–µ–Ω –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å –ø–æ—Å–ª–µ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—Å—è —Å –Ω–∏–º –ø–æ–∑–∂–µ, –ø–∏—à–∏—Ç–µ –Ω–∞–º –æ–± —ç—Ç–æ–º\n" \
        "–ü–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ –≤—ã –º–æ–∂–µ—Ç–µ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—Å—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –Ω–∞—Å –∏ –æ –Ω–∞—à–µ–º –ø—Ä–æ–µ–∫—Ç–µ: \nhttps://github.com/Ar1stok/Fire_Detect \n" \
        "–ù–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã:\n" \
        "<a href='https://t.me/Ar1stock'>–ö—Ä—ã–ª–æ–≤ –ü–∞–≤–µ–ª</a>\n" \
        "<a href='https://t.me/VeloR_139'>–°–∏—á–∫–∞—Ä—å –ò–≤–∞–Ω</a>\n" \
        "<a href='https://t.me/Shaman1641'>–ù–∞–∑–∞—Ä–æ–≤ –î–∞–Ω–∏–ª</a>", 
        reply_markup=ReplyKeyboardRemove(), parse_mode="HTML"
    )


async def detection(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Command to start the def video."""
    user = update.message.from_user
    logger.info("User %s: Want to send a video", user.first_name)
    await update.message.reply_text(
        "–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –≤–∏–¥–µ–æ, –Ω–æ –Ω–µ –±–æ–ª–µ–µ 20 —Å–µ–∫—É–Ω–¥, –∏–Ω–∞—á–µ –≤–∏–¥–µ–æ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç—Å—èü´†",
        reply_markup=ReplyKeyboardRemove(),
    )

    return VIDEO


async def video(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Wait and start process video."""
    user = update.message.from_user
    video_file = await update.message.video.get_file()
    await video_file.download_to_drive(f"video/obj_{user.id}.mp4")
    logger.info("Video of %s: %s", user.first_name, f"obj_{user.id}.mp4")
    await update.message.reply_text(
        f"–í–∏–¥–µ–æ –ø–æ–ª—É—á–µ–Ω–æ! –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º..."
    )
    
    duration = process.duration(f"obj_{user.id}.mp4")
    if duration > 21:
        await update.message.reply_text(
            "–í–∞—à–µ –≤–∏–¥–µ–æ –±–æ–ª–µ–µ 20 —Å–µ–∫—É–Ω–¥, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥—Ä—É–≥–æ–µüòë"
        )
        return VIDEO
    
    fire_count = process.detection(f"obj_{user.id}.mp4")
    logger.info(f"Video of {user.first_name} processed, on the video {fire_count} fire frames" )
    if not fire_count:
        await update.message.reply_text(
            "–û–≥–Ω—è –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ‚ùå"
        )
    else:
        await update.message.reply_text(
            "–û–≥–æ–Ω—å –æ–±–Ω–∞—Ä—É–∂–µ–Ωüî•"
        )
    return ConversationHandler.END


async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """End conversation or cancel command 'detect'."""
    user = update.message.from_user
    logger.info("User %s canceled the conversation.", user.first_name)
    await update.message.reply_text(
        "–ì–∞–ª—è, —É –Ω–∞—Å –æ—Ç–º–µ–Ω–∞", reply_markup=ReplyKeyboardRemove()
    )
    return ConversationHandler.END


def main() -> None:
    """Run the bot."""
    # Create the Application and pass it your bot's token.
    application = Application.builder().token(TOKEN).build()

    # Add conversation handler with the states
    conv_handler = ConversationHandler(
        entry_points=[
            CommandHandler("start", start),
            CommandHandler("info", info),
            CommandHandler("detect", detection),
        ],
        states={
            VIDEO: [
                MessageHandler(filters.VIDEO, video),
                CommandHandler("cancel" ,cancel),
            ],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    application.add_handler(conv_handler)

    # Run the bot until the user presses Ctrl-C
    application.run_polling(allowed_updates=Update.ALL_TYPES)


if __name__ == "__main__":
    main()